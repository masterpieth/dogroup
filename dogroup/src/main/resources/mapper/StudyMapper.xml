<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dogroup.mybatis.StudyMapper">
	<!--StudyDTO ResultMap-->
	<resultMap id="studyResultMap" 						type="StudyDTO">
		<id property="studyId" 							column="study_id"/>
		<result property="studyTitle" 					column="study_title"/>
		<result property="studySize" 					column="study_size"/>
		<result property="studyFee" 					column="study_fee"/>
		<result property="studyCertification" 			column="study_certification"/>
		<result property="studyDiligenceCutline"		column="study_diligence_cutline"/>
		<result property="studyPostDate"				column="study_post_date"/>
		<result property="studyStartDate" 				column="study_start_date"/>
		<result property="studyEndDate"					column="study_end_date"/>
		<result property="studyHomeworkPerWeek" 		column="study_homework_per_week"/>
		<result property="studyPaid"					column="study_paid"/>
		<result property="studyGatheredSize" 			column="study_gathered_size"/>
		<result property="studyContent"					column="study_content"/>
		<!--스터디장-->
		<association property="studyLeader" 			javaType="UserDTO">
			<result property="email" 					column="user_email"/>
			<result property="name" 					column="user_name"/>
			<result property="diligence"				column="user_diligence"/>
		</association>
		<!--과목 리스트-->
		<collection property="subjects" 				ofType="StudySubjectDTO">
			<id property="subject.subjectCode" 			column="subject_code"/>
			<result property="studyId" 					column="study_id"/>
			<!--과목-->
			<association property="subject" 			javaType="SubjectDTO">
				<id 	property="subjectCode" 			column="subject_code"/>
				<result property="subjectName" 			column="subject_name"/>
				<!--부모과목-->
				<association property="subjectParent" 	javaType="SubjectDTO">
					<result property="subjectCode" 		column="subject_parent_code"/>
				</association>
			</association>
		</collection>
		<!--스터디원 리스트-->
		<collection property="studyUsers" 				ofType="StudyUserDTO">
			<id property="email" 						column="user_email"/>
			<result property="studyId" 					column="study_id"/>
			<!--숙제 리스트-->
			<collection property="homeworkList" 		ofType="HomeworkDTO">
				<id property="email" 					column="user_email"/>
				<id property="studySubmitDt" 			column="study_submit_dt"/>
				<result property="studyId" 				column="study_id"/>
			</collection>
		</collection>
	</resultMap>
	
	<resultMap  id="studyUsersResultMap" 			type="StudyUserDTO">
	<id property="studyId" 							column="study_id"/>
	<id property="email" 							column="user_email"/>
		<result property="name" 					column="user_name"/>
		<result property="diligence"				column="user_diligence"/>
		<result property="status"                   column="user_status" />
			<!--스터디원 리스트-->
		<collection property="homeworkList" 		ofType="HomeworkDTO">
			<id property="studyId" 					column="study_id"/>
			<id property="studySubmitDt"			column="study_submit_dt"/>
			<id property="email" 					column="user_email"/>
			<result property="email" 				column="user_email"/>
		</collection>
	</resultMap>
	
	<resultMap id="subjectMap" 					type="SubjectDTO">
		<id 	property="subjectCode" 			column="subject_code"/>
		<result property="subjectName" 			column="subject_name"/>
		<!--부모과목-->
		<association property="subjectParent" 	javaType="SubjectDTO">
			<result property="subjectCode" 		column="subject_parent_code"/>
		</association>
	</resultMap>
	
	<!--회원에게 스터디 종료에 따른 금액을 환급한다.-->
	<update id="refundToUser" statementType="CALLABLE" parameterType="hashmap">
		{ CALL proc_wallet_prize (
			#{email},
			#{prize},
			#{studyId}
		)}
	</update>
	
	<!--회원의 성실도를 반영한다. (스터디 종료 성실도 결과 반영)-->
	<update id="setUserDeligence" parameterType="StudyUserDTO">
		UPDATE
			users 
		SET 
			user_diligence = #{diligence}
		WHERE
			user_email = #{email}
	</update>
	
	<!--회원의 성실도를 반환한다.-->
	<select id="searchUserDeligence" parameterType="String" resultType="int">
		SELECT
			user_diligence
		FROM 
			users
		WHERE user_email = #{email}
	</select>
	
	<!--스터디 과목을 insert 한다-->
	<insert id="insertStudySubject" parameterType="java.util.List">
		<foreach collection="list" item="item" separator=" " open="INSERT ALL" close="SELECT * FROM dual">
			INTO study_subject (
				study_id,
				subject_code
			) VALUES (
				#{item.studyId},
				#{item.subject.subjectCode}
			)
		</foreach>
	</insert>
	
	<!--스터디 생성, 생성후 id를 반환한다.-->
	<insert id="insertStudy" parameterType="StudyDTO">
		<selectKey keyProperty="studyId" resultType="int" order="AFTER">
			SELECT study_seq.currval as CURVAL FROM dual
		</selectKey>
		INSERT INTO study (
			study_id,
			user_email,
			study_title,
			study_size,
			study_fee,
			study_certification,
			study_diligence_cutline,
			study_post_date,
			study_start_date,
			study_end_date,
			study_homework_per_week,
			study_paid,
			study_content,
			study_gathered_size
		) VALUES (
			study_seq.nextval,
			#{studyLeader.email},
			#{studyTitle},
			#{studySize},
			#{studyFee},
			#{studyCertification},
			#{studyDiligenceCutline},
			sysdate,
			#{studyStartDate},
			#{studyEndDate},
			#{studyHomeworkPerWeek},
			0,
			#{studyContent},
			#{studyGatheredSize}
		)
	</insert>
	
	<!--procWallet을 호출한다.-->
	<update id="procWallet" parameterType="hashmap" statementType="CALLABLE">
		{ CALL proc_wallet (
			#{flag},
			#{email},
			#{studyId},
			#{transactionUser},
			#{transactionCategory},
			#{transactionMoney}
		)}
	</update>
	
	<!--스터디 유저의(개인) 모든 과제 제출 내역을 반환한다.-->
	<select id="selectUserHomeworkByEmail" parameterType="hashmap" resultType="HomeworkDTO">
		SELECT
			study_submit_dt,
			study_id,
			user_email
		FROM
			homework
		WHERE
			study_id = #{studyId}
			AND user_email = #{email}
	</select>
	
	<!--스터디의 현재 정보를 반환한다.-->
	<select id="selectStudyByStudyId" parameterType="int" resultMap="studyResultMap">
		SELECT	
			st.*, 
			ss.subject_code,
			s.subject_name,
            u.user_diligence,
            u.user_name
		FROM STUDY st 
		JOIN study_subject ss ON st.study_id = ss.study_id
		JOIN subject s ON  ss.subject_code = s.subject_code
        JOIN users u ON st.user_email = u.user_email
		WHERE st.study_id= #{studyId}
	</select>

	<!-- 스터디원 목록과 스터디원의 회원 정보를 반환한다. -->
	<select id = "studyUsers" resultMap="studyUsersResultMap" parameterType="int">
	SELECT su.study_id,
		   su.user_email,
		   u.user_name,
		   u.user_diligence,
		   u.user_status
	FROM 
		study_users su
	JOIN 
		users u
	ON su.user_email  = u.user_email
	WHERE su.study_id = #{studyId}
	</select>
	
	<!-- 스터디회원의 과제를 insert한다 -->
	<insert id= "insertHomeworkByEmail"  parameterType="map">
	INSERT 
	INTO 
	HOMEWORK 
	VALUES(#{created_at}, #{studyId}, #{email})
	</insert>
	
	<!-- 스터디 과목 수정시 먼저 과목을 삭제한다 -->
	<delete id="deleteStudySubject" parameterType="int">
	DELETE 
	FROM 
		study_subject 
	WHERE 
		study_id = #{studyId}
	</delete>
	

	<!--스터디원을 삭제한다-->
	<delete id="deleteStudyUser" parameterType="java.util.List">
			DELETE study_users
			WHERE
				user_email IN
		<foreach collection="list" item="item" index="i" open="(" separator="," close=")">
			#{item.email}
		</foreach>
	</delete>
	
	<!--스터디를 삭제한다, 외래키때문에 delete가 불가함, 대신 size를 -1로 변경-->
	<update id="updateStudyStatus" parameterType="int">
		UPDATE study
		SET	
			study_size = -1
		WHERE
			study_id = #{study_id}
	</update>
	
	<!-- 검색 조건에 맞는 스터디 개수를 카운트하여 반환한다 -->
	<select id="studyCount" parameterType="StudyDTO" resultType="int" >
	SELECT 
		count(*) 
	FROM 
		study
	WHERE 
		<if test="studyTitle != null">
			study_title Like '%'||#{studyTitle}||'%' AND
		</if>
		<if test="studyLeader != null">
			user_email Like '%'||#{studyLeader.email}||'%'AND 
		</if>
		<if test="studySize != 0">
			study_size = #{studySize} AND 
		</if>
		<if test="studyDiligenceCutline != 0">
		 	<![CDATA[
		 		study_diligence_cutline <= #{studyDiligenceCutline} AND
			 ]]>
		</if>
		<if test="studyFee != 0">
		 	<![CDATA[
		 		study_fee <= #{studyFee} AND 
		 	]]>
		</if>
		<if test="studyStartDate != null">
			<![CDATA[
		 		study_start_date >= #{studyStartDate} AND
		 	]]>
		</if>
		<if test="studyEndDate != null">
			<![CDATA[
		 		study_end_date <= #{studyEndDate} AND
		 	]]>
		</if>
			<![CDATA[
				NOT study_size < 0 
			]]>
	</select>
	
	<!-- 스터디의 모든 과제 제출 내역을 반환한다. -->
	<select id="selectHomeworkByStudyId" parameterType="int" resultType="HomeworkDTO">
		SELECT
			*
		FROM
			homework
		WHERE
			study_id = #{studyId}
		ORDER BY
			user_email,
			study_submit_dt
	</select>
	
	<!-- 회원의 이메일로 진행된 (검색 조건에 맞는)스터디의 갯수를 반환한다. -->
	<select id="myStudyCount" parameterType="hashmap" resultType="int">
		
		SELECT 
			count(*) 
		FROM 
			study
		WHERE 
			<if test="studyDTO.studyTitle != null">
				study_title Like '%'||#{studyDTO.studyTitle}||'%' AND
			</if>
			<if test="studyDTO.studyLeader.email != null">
				user_email Like '%'||#{studyDTO.studyLeader.email}||'%' AND
			</if>
			<if test="studyDTO.studySize != 0">
				study_size = #{studyDTO.studySize} AND
			</if>
			<if test="studyDTO.studyDiligenceCutline != 0">
				 <![CDATA[
				 	study_diligence_cutline <= #{studyDTO.studyDiligenceCutline} AND
				 ]]>
			</if>
			<if test="studyDTO.studyFee != 0">
				 <![CDATA[
				 	study_fee <= #{studyDTO.studyFee} AND
				 ]]>
			</if>
			<if test="studyDTO.studyStartDate != null">
				 <![CDATA[
				 	study_start_date >= #{studyDTO.studyStartDate} AND
				 ]]>
			</if>
			<if test="studyDTO.studyEndDate != null">
				 <![CDATA[
				 	study_end_date <= #{studyDTO.studyEndDate} AND
				 ]]>	
			</if>
			study_id in (select study_id from study_users WHERE user_email = #{userEmail}) AND
			<![CDATA[
				NOT study_size < 0
			]]>
	</select>
	
	<!-- 회원의 이메일로 진행된 (검색 조건에 맞는)스터디 정보를 반환한다. -->
	<select id="selectStudyByEmail" parameterType="hashmap" resultMap="studyResultMap">
		SELECT 
			st.*,
			s.subject_code,
			s.subject_name,
			s.subject_parent_code,
			u.user_name,
			(SELECT user_diligence FROM users WHERE user_email = st.user_email) user_diligence 
		FROM 
			(SELECT * FROM 
				(SELECT rownum rn, a.* FROM 
					(SELECT * FROM study 
					 WHERE
					 	<if test="studyDTO.studyTitle != null">
							study_title Like '%'||#{studyDTO.studyTitle}||'%' AND
						</if>
						<if test="studyDTO.studyLeader != null">
							<if test="studyDTO.studyLeader.email != null">
								user_email Like '%'||#{studyDTO.studyLeader.email}||'%' AND
							</if>
						</if>
						<if test="studyDTO.studySize != 0">
							study_size = #{studyDTO.studySize} AND
						</if>
						<if test="studyDTO.studyDiligenceCutline != 0">
							 <![CDATA[
							 	study_diligence_cutline <= #{studyDTO.studyDiligenceCutline} AND
							 ]]>
						</if>
						<if test="studyDTO.studyFee != 0">
							 <![CDATA[
							 	study_fee <= #{studyDTO.studyFee} AND
							 ]]>
						</if>
						<if test="studyDTO.studyStartDate != null">
							 <![CDATA[
							 	study_start_date >= #{studyDTO.studyStartDate} AND
							 ]]>
						</if>
						<if test="studyDTO.studyEndDate != null">
							 <![CDATA[
							 	study_end_date <= #{studyDTO.studyEndDate} AND
							 ]]>	
						</if>
						study_id in (select study_id from study_users WHERE user_email = #{userEmail}) AND
						<![CDATA[
							NOT study_size < 0
						]]>
					ORDER BY study_id) a )
				WHERE
					rn 
				BETWEEN #{startRow} AND #{endRow}
			) st 
		JOIN study_subject ss ON st.study_id = ss.study_id 
		JOIN subject s ON  ss.subject_code = s.subject_code
		JOIN users u ON st.user_email = u.user_email
	</select>
	
	<!-- 검색 조건에 맞는 스터디 리스트를 반환한다. -->
	<select id="selectStudy" parameterType="hashmap" resultMap="studyResultMap">
		SELECT 
			st.*,
			s.subject_code,
			s.subject_name,
			s.subject_parent_code,
			u.user_name,
			(SELECT user_diligence FROM users WHERE user_email = st.user_email) user_diligence 
		FROM 
			(SELECT * FROM 
				(SELECT rownum rn, a.* FROM 
					(SELECT * FROM study 
					 WHERE
					 	<if test="studyDTO.studyTitle != null">
							study_title Like '%'||#{studyDTO.studyTitle}||'%' AND
						</if>
						<if test="studyDTO.studyLeader != null">
							<if test="studyDTO.studyLeader.email != null">
								user_email Like '%'||#{studyDTO.studyLeader.email}||'%' AND
							</if>
						</if>
						<if test="studyDTO.studySize != 0">
							study_size = #{studyDTO.studySize} AND
						</if>
						<if test="studyDTO.studyDiligenceCutline != 0">
							 <![CDATA[
							 	study_diligence_cutline <= #{studyDTO.studyDiligenceCutline} AND
							 ]]>
						</if>
						<if test="studyDTO.studyFee != 0">
							 <![CDATA[
							 	study_fee <= #{studyDTO.studyFee} AND
							 ]]>
						</if>
						<if test="studyDTO.studyStartDate != null">
							 <![CDATA[
							 	study_start_date >= #{studyDTO.studyStartDate} AND
							 ]]>
						</if>
						<if test="studyDTO.studyEndDate != null">
							 <![CDATA[
							 	study_end_date <= #{studyDTO.studyEndDate} AND
							 ]]>	
						</if>
						<![CDATA[
							NOT study_size < 0
						]]>
					ORDER BY study_id) a )
				WHERE
					rn 
				BETWEEN #{startRow} AND #{endRow}
			) st 
		JOIN study_subject ss ON st.study_id = ss.study_id 
		JOIN subject s ON  ss.subject_code = s.subject_code
		JOIN users u ON st.user_email = u.user_email
	</select>
	
	<!-- 현재 참여중인 스터디중 깃허브 과제제출 방식의 스터디의 갯수를 반환한다. -->
	<select id="selectCurrentlyStudyByEmail" parameterType="String" resultType="int">
		SELECT
			count(*)
		FROM
			study 
		JOIN
			(select study_id FROM study_users WHERE user_email = #{email}) USING(study_id)
		WHERE
			study_certification = 1
	</select>
	
	<!--과목들을 가져온다-->
	<select id="selectSubject" resultMap="subjectMap">
		SELECT
			*
		FROM
			subject
	</select>
</mapper>