<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dogroup.mybatis.StudyMapper">
	<!--StudyDTO ResultMap-->
	<resultMap id="studyResultMap" 						type="StudyDTO">
		<id property="studyId" 							column="study_id"/>
		<result property="studyTitle" 					column="study_title"/>
		<result property="studySize" 					column="study_size"/>
		<result property="studyFee" 					column="study_fee"/>
		<result property="studyCertification" 			column="study_certification"/>
		<result property="studyDiligenceCutline"		column="study_diligence_cutline"/>
		<result property="studyPostDate"				column="study_post_date"/>
		<result property="studyStartDate" 				column="study_start_date"/>
		<result property="studyEndDate"					column="study_end_date"/>
		<result property="studyHomeworkPerWeek" 		column="study_homework_per_week"/>
		<result property="studyPaid"					column="study_paid"/>
		<result property="studyGatheredSize" 			column="study_gathered_size"/>
		<result property="studyContent"					column="study_content"/>
		<!--스터디장-->
		<association property="studyLeader" 			javaType="UserDTO">
			<result property="email" 					column="user_email"/>
			<result property="name" 					column="user_name"/>
			<result property="diligence"				column="user_diligence"/>
		</association>
		<!--과목 리스트-->
		<collection property="subjects" 				resultMap="subjectResultMap"/>
		<!--스터디원 리스트-->
		<collection property="studyUsers" 				ofType="StudyUserDTO"		javaType="ArrayList">
			<result property="email" 					column="user_email"/>
			<!--숙제 리스트-->
			<collection property="homeworkList" 		ofType="HomeworkDTO">
				<result property="email" 				column="user_email"/>
				<result property="studySubmitDt" 		column="study_submit_dt"/>
			</collection>
		</collection>
	</resultMap>
	
	<resultMap id="subjectResultMap" type="StudySubjectDTO">
		<!--과목-->
		<association property="subject" 			javaType="SubjectDTO">
			<id property="subjectCode" 				column="subject_code"/>
			<result property="subjectName" 			column="subject_name"/>
			<!--부모과목-->
			<association property="subjectParent" 	javaType="SubjectDTO">
				<result property="subjectCode" 		column="subject_parent_code"/>
			</association>
		</association>
	</resultMap>

	<!--회원에게 스터디 종료에 따른 금액을 환급한다.-->
	<update id="refundToUser" statementType="CALLABLE" parameterType="hashmap">
		{ CALL proc_wallet_prize (
			#{email},
			#{prize},
			#{studyId}
		)}
	</update>
	
	<!--회원의 성실도를 반영한다. (스터디 종료 성실도 결과 반영)-->
	<update id="setUserDeligence" parameterType="StudyUserDTO">
		UPDATE
			users 
		SET 
			user_diligence = #{diligence}
		WHERE
			user_email = #{email}
	</update>
	
	<!--회원의 성실도를 반환한다.-->
	<select id="searchUserDeligence" parameterType="String" resultType="int">
		SELECT
			user_diligence
		FROM 
			users
		WHERE user_email = #{email}
	</select>
	
	<!--스터디 과목을 insert 한다-->
	<insert id="insertStudySubject" parameterType="java.util.List">
		<foreach collection="list" item="item" separator=" " open="INSERT ALL" close="SELECT * FROM dual">
			INTO study_subject (
				study_id,
				subject_code
			) VALUES (
				#{item.studyId},
				#{item.subject.subjectCode}
			)
		</foreach>
	</insert>
	
	<!--스터디 생성, 생성후 id를 반환한다.-->
	<insert id="insertStudy" parameterType="StudyDTO">
		<selectKey keyProperty="studyId" resultType="int" order="AFTER">
			SELECT study_seq.currval as CURVAL FROM dual
		</selectKey>
		INSERT INTO study (
			study_id,
			user_email,
			study_title,
			study_size,
			study_fee,
			study_certification,
			study_diligence_cutline,
			study_post_date,
			study_start_date,
			study_end_date,
			study_homework_per_week,
			study_paid,
			study_content,
			study_gathered_size
		) VALUES (
			study_seq.nextval,
			#{studyLeader.email},
			#{studyTitle},
			#{studySize},
			#{studyFee},
			#{studyCertification},
			#{studyDiligenceCutline},
			sysdate,
			#{studyStartDate},
			#{studyEndDate},
			#{studyHomeworkPerWeek},
			0,
			#{studyContent},
			#{studyGatheredSize}
		)
	</insert>
	
	<!--procWallet을 호출한다.-->
	<update id="procWallet" parameterType="hashmap" statementType="CALLABLE">
		{ CALL proc_wallet (
			#{flag},
			#{email},
			#{studyId},
			#{transactionUser},
			#{transactionCategory},
			#{transactionMoney}
		)}
	</update>
	
	<!--스터디 유저의(개인) 모든 과제 제출 내역을 반환한다.-->
	<select id="selectUserHomeworkByEmail" parameterType="hashmap" resultType="HomeworkDTO">
		SELECT
			study_submit_dt,
			study_id,
			user_email
		FROM
			homework
		WHERE
			study_id = #{studyId}
			AND user_email = #{email}
	</select>
	
	<!--스터디의 현재 정보를 반환한다.-->
	<select id="selectStudyByStudyId" parameterType="int" resultMap="studyResultMap">
		SELECT	
			st.*, 
			ss.study_id as subject_study_id,
			ss.subject_code,
			s.subject_name,
            u.user_diligence,
            u.user_name
		FROM STUDY st 
		JOIN study_subject ss ON st.study_id = ss.study_id
		JOIN subject s ON  ss.subject_code = s.subject_code
        JOIN users u ON st.user_email = u.user_email
		WHERE st.study_id= #{studyId}
	</select>

	<select id = "selectStudyUsersByStudyId" resultType = "StudyUserDTO" parameterType="int">
	
	</select>
	<!-- 스터디원 목록과 스터디원의 회원 정보를 반환한다. -->
	<select id = "studyUsers" resultType = "StudyUserDTO" parameterType="int">

	SELECT * 
	FROM 
		study_users 
	JOIN 
		users 
	USING (user_email) 
	WHERE study_id = #{studyId}
	</select>
	
	<!-- 스터디회원의 과제를 insert한다 -->
	<insert id= "insertHomeworkByEmail"  parameterType="map">
	INSERT 
	INTO 
	HOMEWORK 
	VALUES(#{created_at}, #{studyId}, #{email})
	</insert>
	
	<!-- 스터디 과목 수정시 먼저 과목을 삭제한다 -->
	<delete id="deleteStudySubject" parameterType="int">
	Delete 
	FROM 
		study_subject 
	WHERE 
		study_id = #{studyId};
	</delete>


	
	
	
</mapper>